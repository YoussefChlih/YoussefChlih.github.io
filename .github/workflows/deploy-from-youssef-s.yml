# Deploy from youssef-s Repository
#
# Manually builds the source repository (YoussefChlih/youssef-s)
# and deploys the built static files to this GitHub Pages repository.

name: Deploy from youssef-s

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Branch, tag, or commit SHA from youssef-s repository to build
        required: false
        default: "main"
        type: string

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repository (GitHub Pages repo)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Checkout source repository (youssef-s)
        uses: actions/checkout@v4
        with:
          repository: YoussefChlih/youssef-s
          ref: ${{ inputs.ref || 'main' }}
          path: source
          token: ${{ secrets.GITHUB_TOKEN }}

      # Use cache only when the lockfile exists to avoid setup-node errors

      - name: Set up Node.js 20 (npm cache)
        if: hashFiles('source/package-lock.json') != ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: source/package-lock.json

      - name: Set up Node.js 20 (pnpm cache)
        if: hashFiles('source/pnpm-lock.yaml') != ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: source/pnpm-lock.yaml

      - name: Set up Node.js 20 (yarn cache)
        if: hashFiles('source/yarn.lock') != ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: source/yarn.lock

      - name: Set up Node.js 20 (no cache)
        if: |
          hashFiles('source/package-lock.json') == '' &&
          hashFiles('source/pnpm-lock.yaml') == '' &&
          hashFiles('source/yarn.lock') == ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies and build source project
        working-directory: source
        shell: bash
        run: |
          set -e

          # Prefer the package manager that matches the lockfile
          if [ -f pnpm-lock.yaml ]; then
            corepack enable || true
            pnpm --version || npm i -g pnpm
            pnpm install --frozen-lockfile
            pnpm run build

          elif [ -f yarn.lock ]; then
            corepack enable || true
            yarn --version || npm i -g yarn
            # If yarn.lock is v1, this works; if v3/berry, corepack handles it
            yarn install --frozen-lockfile || yarn install --immutable
            yarn run build

          elif [ -f package-lock.json ]; then
            npm ci
            npm run build

          else
            echo "No lockfile found. Proceeding with npm install (non-deterministic)."
            npm install
            npm run build
          fi

      - name: Prepare deployment
        shell: bash
        run: |
          # Create a temporary directory to store files we want to preserve
          mkdir -p temp_preserve

          # Preserve essential files and directories that should not be overwritten
          if [ -d ".git" ]; then cp -r .git temp_preserve/; fi
          if [ -d ".github" ]; then cp -r .github temp_preserve/; fi
          if [ -f "CNAME" ]; then cp CNAME temp_preserve/; fi
          if [ -f "404.html" ]; then cp 404.html temp_preserve/; fi
          if [ -f ".nojekyll" ]; then cp .nojekyll temp_preserve/; fi

          # Clear the root directory (except temp_preserve and source)
          find . -maxdepth 1 -type f -not -name "temp_preserve" -not -name "source" -delete
          find . -maxdepth 1 -type d -not -name "." -not -name ".." -not -name "temp_preserve" -not -name "source" -exec rm -rf {} + 2>/dev/null || true

          # Copy all build output from source/dist to root
          if [ -d "source/dist" ]; then
            cp -r source/dist/* .
          else
            echo "Error: source/dist directory not found"
            exit 1
          fi

          # Restore preserved files and directories
          if [ -d "temp_preserve/.git" ]; then cp -r temp_preserve/.git .; fi
          if [ -d "temp_preserve/.github" ]; then cp -r temp_preserve/.github .; fi
          if [ -f "temp_preserve/404.html" ]; then cp temp_preserve/404.html .; fi
          if [ -f "temp_preserve/.nojekyll" ]; then cp temp_preserve/.nojekyll .; fi

          # Handle CNAME file logic
          if [ -f "temp_preserve/CNAME" ]; then
            cp temp_preserve/CNAME .
          elif [ -f "source/public/CNAME" ]; then
            cp source/public/CNAME .
          fi

          # Clean up temporary directory and source checkout
          rm -rf temp_preserve
          rm -rf source

      - name: Configure Git for bot commits
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check for changes and commit
        shell: bash
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes detected. Skipping commit and push."
          else
            commit_msg="Deploy from youssef-s@${{ inputs.ref || 'main' }} - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git commit -m "$commit_msg"
            git push
            echo "Changes successfully deployed!"
          fi
