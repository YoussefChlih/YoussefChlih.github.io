---
# Deploy from youssef-s Repository
#
# This workflow manually builds the source repository (YoussefChlih/youssef-s)
# and deploys the built static files to this GitHub Pages repository.
#
# How to use:
# 1. Go to the Actions tab in this repository
# 2. Select "Deploy from youssef-s" workflow
# 3. Click "Run workflow"
# 4. Optionally specify a ref (branch/tag/commit) from youssef-s repo
#    (defaults to main)
# 5. Click "Run workflow" button
#
# What this workflow does:
# - Checks out this repository (YoussefChlih.github.io)
# - Checks out the source repository (YoussefChlih/youssef-s) into ./source
# - Sets up Node.js 20 environment
# - Installs dependencies and builds the source project
#   (npm ci && npm run build)
# - Replaces the contents of this repo's root with the build output from
#   ./source/dist
# - Preserves important files: .git, .github, CNAME, 404.html, .nojekyll
#   (if present)
# - Handles CNAME file configuration for custom domain
# - Commits and pushes changes only if there are actual changes to deploy

name: Deploy from youssef-s

"on":
  workflow_dispatch:
    inputs:
      ref:
        description: >-
          Branch, tag, or commit SHA from youssef-s repository to build
        required: false
        default: 'main'
        type: string

# Required permissions for the workflow to commit and push changes
permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout this repository (GitHub Pages repo)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Checkout source repository (youssef-s)
        uses: actions/checkout@v4
        with:
          repository: YoussefChlih/youssef-s
          ref: ${{ inputs.ref || 'main' }}
          path: source
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: source/package-lock.json

      - name: Install dependencies and build source project
        run: |
          cd source
          npm ci
          npm run build

      - name: Prepare deployment
        run: |
          # Create a temporary directory to store files we want to preserve
          mkdir -p temp_preserve

          # Preserve essential files and directories that should not be
          # overwritten
          if [ -d ".git" ]; then
            cp -r .git temp_preserve/
          fi

          if [ -d ".github" ]; then
            cp -r .github temp_preserve/
          fi

          if [ -f "CNAME" ]; then
            cp CNAME temp_preserve/
          fi

          if [ -f "404.html" ]; then
            cp 404.html temp_preserve/
          fi

          if [ -f ".nojekyll" ]; then
            cp .nojekyll temp_preserve/
          fi

          # Clear the root directory (except temp_preserve and source)
          find . -maxdepth 1 -type f -not -name "temp_preserve" \
                 -not -name "source" -delete
          find . -maxdepth 1 -type d -not -name "." -not -name ".." \
                 -not -name "temp_preserve" -not -name "source" \
                 -exec rm -rf {} + 2>/dev/null || true

          # Copy all build output from source/dist to root
          if [ -d "source/dist" ]; then
            cp -r source/dist/* .
          else
            echo "Error: source/dist directory not found"
            exit 1
          fi

          # Restore preserved files and directories
          if [ -d "temp_preserve/.git" ]; then
            cp -r temp_preserve/.git .
          fi

          if [ -d "temp_preserve/.github" ]; then
            cp -r temp_preserve/.github .
          fi

          if [ -f "temp_preserve/404.html" ]; then
            cp temp_preserve/404.html .
          fi

          if [ -f "temp_preserve/.nojekyll" ]; then
            cp temp_preserve/.nojekyll .
          fi

          # Handle CNAME file logic
          if [ -f "temp_preserve/CNAME" ]; then
            # Preserve existing CNAME from this repo
            cp temp_preserve/CNAME .
          elif [ -f "source/public/CNAME" ]; then
            # Copy CNAME from source repo if it exists and we don't have one
            cp source/public/CNAME .
          fi

          # Clean up temporary directory
          rm -rf temp_preserve
          rm -rf source

      - name: Configure Git for bot commits
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Check for changes and commit
        run: |
          # Add all changes to staging
          git add .

          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes detected. Skipping commit and push."
          else
            # Commit changes with a descriptive message
            commit_msg="Deploy from youssef-s@${{ inputs.ref || 'main' }}"
            commit_msg="$commit_msg - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            git commit -m "$commit_msg"

            # Push changes to the repository
            git push

            echo "Changes successfully deployed!"
          fi
